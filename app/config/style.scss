@tailwind base;
@tailwind components;
@tailwind utilities;
$white: white;
$black: black;
$c_1: red;
$grey_1: #c1c1c1;
$grey_2: #141414;
$red: red;
@layer utilities {
	// fit
	.fit_1 {
		@apply v2:px-[.5rem] v3:px-[1rem] v4:px-[1.5rem] v5:px-[3rem];
	}
	/* text colour */
	.tc_white {
		color: $white;
	}
	.tc_1 {
		color: $c_1;
	}
	.tc_grey {
		color: $grey_1;
	}
	.tc_black {
		color: $black;
	}
	.tc_red {
		color: $red;
	}
	/* text size */
	.ts_1 {
		font-size: 0.8rem;
	}
	.ts_2 {
		font-size: 0.95rem;
	}
	.ts_3 {
		font-size: 1.1rem;
	}
	/* text fam */
	.tf_1 {
		font-family: verdana;
	}
	/* text weight */
	.tw_1 {
		font-weight: 900;
	}
	.tw_2 {
		font-weight: 800;
	}
	.tw_3 {
		font-weight: 700;
	}
	.tw_4 {
		font-weight: 600;
	}
	.tw_5 {
		font-weight: 500;
	}
	/* text case/shift */
	.ts_upper {
		text-transform: uppercase;
	}
	/* text align */
	.ta_mid {
		text-align: center;
	}
	.ta_equal {
		text-align: justify;
	}
	.ta_left {
		text-align: left;
	}
	.ta_right {
		text-align: right;
	}
	// box size/space
	.w_full {
		width: 100%;
	}
	.h_full {
		height: 100%;
	}
	// background colour
	// opacity
	.c_1 {
		background-color: $c_1;
	}
	.c_white {
		background-color: $white;
	}
	.c_black {
		background-color: $black;
	}
	.c_red {
		background-color: $red;
	}
	.c_grey_1 {
		background-color: $grey_1;
	}
	.c_grey_2 {
		background-color: $grey_2;
	}
	.c_null {
		background-color: transparent;
	}
	/* rounded */
	// shadow
	.shadow_1 {
		box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
	}
	/* border */
	.bc_black {
		border-color: $black;
	}
	.bc_white {
		border-color: $white;
	}
	.bc_grey_1 {
		border-color: $grey_1;
	}
	.bc_grey_2 {
		border-color: $grey_2;
	}
	.bw_null {
		border-width: 0rem;
	}
	.bw_1 {
		border-width: 0.05rem;
	}
	.bw_2 {
		border-width: 0.1rem;
	}
	/* align */
	.a_norm {
		flex: none;
	}
	.ax_left {
		display: flex;
		flex-direction: row;
		justify-content: flex-end;
	}
	.ax_mid {
		display: flex;
		flex-direction: row;
		justify-content: center;
	}
	.ax_right {
		display: flex;
		flex-direction: row;
		justify-content: flex-start;
	}
	.ax_same {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
	}
	.ax_auto {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
	}
	.sx_top {
		align-items: flex-start;
	}
	.sx_mid {
		align-items: center;
	}
	.sx_bottom {
		align-items: flex-end;
	}
	.ay_top {
		display: flex;
		flex-direction: column;
		justify-content: flex-start;
	}
	.ay_mid {
		display: flex;
		flex-direction: column;
		justify-content: center;
	}
	.ay_bottom {
		display: flex;
		flex-direction: column;
		justify-content: flex-end;
	}
	.ay_same {
		display: flex;
		flex-direction: column;
		justify-content: space-between;
	}
	.ay_auto {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
	}
	.sy_left {
		align-items: flex-end;
	}
	.sy_right {
		align-items: flex-start;
	}
	.sy_mid {
		align-items: center;
	}
	/* contain  */
	.c_norm {
		object-fit: none;
	}
	.c_fit {
		object-fit: contain;
	}
	.c_full {
		object-fit: cover;
	}
	.c_stretch {
		object-fit: fill;
	}
	// to do overflow
	.no_scroll::-webkit-scrollbar {
		display: none;
	}
	.no_scroll {
		-ms-overflow-style: none; /* IE and Edge */
		scrollbar-width: none; /* Firefox */
	}
	// for size trans
	.size_0 {
		@apply w-0 h-0 max-w-0 max-h-0 border-0 overflow-hidden;
	}
	.see_null {
		display: none;
		overflow: hidden;
	}
	.see_full {
		display: block;
		overflow: visible;
	}
	.see_size {
		visibility: hidden;
	}
	.z_norm {
		position: static;
	}
	.z_fit {
		position: relative;
	}
	// sometimes add z-[n], n is int
	.z_put {
		position: absolute;
	}
	.z_fix {
		position: sticky;
	}
	.left_auto {
		left: auto;
	}
	.right_auto {
		right: auto;
	}
	.top_auto {
		top: auto;
	}
	.bottom_auto {
		bottom: auto;
	}
	.cursor_pointer {
		cursor: pointer;
	}
	.slider {
		width: 100%;
		height: 0.3rem;
		background: #d3d3d3;
		-webkit-appearance: none;
		cursor: pointer;
	}
	.slider::-webkit-slider-thumb {
		-webkit-appearance: none;
		appearance: none;
		width: 0.9rem;
		height: 0.9rem;
		background: #aa0404;
		border-radius: 100%;
		cursor: pointer;
	}
	.slider::-moz-range-thumb {
		width: 0.9rem;
		height: 0.9rem;
		background: #aa0404;
		border-radius: 100%;
		cursor: pointer;
	}
	// icons > svgs : stroke width + color + fill color
	.stroke_white {
		fill: $white;
	}
	.trans_start {
		transition-property: width, height;
		transition-duration: 1s;
		transition-timing-function: ease-in-out;
		transition-delay: 1s;
		-webkit-transition-property: width, height;
		-webkit-transition-duration: 1s;
		-webkit-transition-timing-function: ease-in-out;
		-webkit-transition-delay: 1s;
	}
	.trans_end {
		transition-property: width, height;
		transition-duration: 1s;
		transition-timing-function: ease-in-out;
		-webkit-transition-property: width, height;
		-webkit-transition-duration: 1s;
		-webkit-transition-timing-function: ease-in-out;
	}
	/* viewport - see config (v1 - v5) */
	/* default: block, also: flex, grid */
	// states : hover:tc_red , focus:c_blue ,
	// use rem, based of root or %
	:root {
		font-size: 16px;
	}
	*,
	*:focus,
	*:active {
		outline: none;
	}
	/*
	css props not sup in older browsers: gap (use mt,ml), inset (use top-0 left-0),
	css dont use confusing: space auto like mx-auto (use align/shift).
	outline doesnt work safari.
	tailwind: *,first,last: states dont work
	make all elements display:block;
	look into inherit, initial, auto, none eg w flex and size
	useful:
	w-[calc(100%-1rem)]
	safari:
	less sup/ not useful:
	aspect (set size of one then use a real calc of other axis), 
	fit-content try auto like w-auto (auto is def for size),
*/
}
